name: FinOpsGuard Cost Check

on:
  pull_request:
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
      - '**/*.hcl'
      - '**/*.yaml'
      - '**/*.yml'
      - '**/kubernetes/**'
      - '**/k8s/**'
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - master
      - develop
    paths:
      - '**/*.tf'
      - '**/*.tfvars'
      - '**/*.hcl'
      - '**/*.yaml'
      - '**/*.yml'
      - '**/kubernetes/**'
      - '**/k8s/**'

jobs:
  cost-check:
    name: FinOpsGuard Cost Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Detect Infrastructure Files
        id: detect-infra
        run: |
          echo "Detecting infrastructure files..."
          
          # Find Terraform files
          TF_FILES=$(find . -name "*.tf" -o -name "*.tfvars" -o -name "*.hcl" | grep -v ".terraform" | head -10)
          if [ -n "$TF_FILES" ]; then
            echo "Found Terraform files: $TF_FILES"
            echo "iac_type=terraform" >> $GITHUB_OUTPUT
            echo "iac_files=$TF_FILES" >> $GITHUB_OUTPUT
          fi
          
          # Find Kubernetes files
          K8S_FILES=$(find . -name "*.yaml" -o -name "*.yml" | grep -E "(kubernetes|k8s|deployment|service|configmap|secret)" | head -10)
          if [ -n "$K8S_FILES" ]; then
            echo "Found Kubernetes files: $K8S_FILES"
            if [ -z "$TF_FILES" ]; then
              echo "iac_type=kubernetes" >> $GITHUB_OUTPUT
              echo "iac_files=$K8S_FILES" >> $GITHUB_OUTPUT
            fi
          fi
          
          # If no infrastructure files found, skip
          if [ -z "$TF_FILES" ] && [ -z "$K8S_FILES" ]; then
            echo "No infrastructure files detected, skipping cost check"
            echo "skip=true" >> $GITHUB_OUTPUT
          fi

      - name: Run FinOpsGuard Cost Check
        if: steps.detect-infra.outputs.skip != 'true'
        id: finopsguard-check
        env:
          FINOPSGUARD_URL: ${{ vars.FINOPSGUARD_URL || 'http://localhost:8080' }}
          FINOPSGUARD_TOKEN: ${{ secrets.FINOPSGUARD_TOKEN }}
          ENVIRONMENT: ${{ vars.FINOPSGUARD_ENVIRONMENT || 'dev' }}
          MONTHLY_BUDGET: ${{ vars.FINOPSGUARD_MONTHLY_BUDGET || '100' }}
        run: |
          echo "Running FinOpsGuard cost check..."
          
          # Prepare infrastructure files content
          IAC_CONTENT=""
          IAC_TYPE="${{ steps.detect-infra.outputs.iac_type }}"
          IAC_FILES="${{ steps.detect-infra.outputs.iac_files }}"
          
          echo "Infrastructure type: $IAC_TYPE"
          echo "Infrastructure files: $IAC_FILES"
          
          # Combine file contents
          for file in $IAC_FILES; do
            if [ -f "$file" ]; then
              echo "Processing file: $file"
              IAC_CONTENT="$IAC_CONTENT$(echo -e "\n# File: $file\n$(cat "$file")\n")"
            fi
          done
          
          # Encode content as base64
          PAYLOAD=$(echo -n "$IAC_CONTENT" | base64 -w 0)
          
          # Prepare request body
          REQUEST_BODY=$(cat <<EOF
          {
            "iac_type": "$IAC_TYPE",
            "iac_payload": "$PAYLOAD",
            "environment": "$ENVIRONMENT",
            "budget_rules": {
              "monthly_budget": $MONTHLY_BUDGET
            }
          }
          EOF
          )
          
          echo "Sending request to FinOpsGuard..."
          echo "Request URL: $FINOPSGUARD_URL/mcp/checkCostImpact"
          
          # Make request to FinOpsGuard
          RESPONSE=$(curl -s -w "\n%{http_code}" \
            -X POST "$FINOPSGUARD_URL/mcp/checkCostImpact" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $FINOPSGUARD_TOKEN" \
            -d "$REQUEST_BODY")
          
          # Extract response body and status code
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          RESPONSE_BODY=$(echo "$RESPONSE" | head -n -1)
          
          echo "HTTP Status Code: $HTTP_CODE"
          echo "Response: $RESPONSE_BODY"
          
          # Parse response
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ FinOpsGuard cost check completed successfully"
            
            # Extract key metrics
            MONTHLY_COST=$(echo "$RESPONSE_BODY" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('estimated_monthly_cost', 0))")
            WEEKLY_COST=$(echo "$RESPONSE_BODY" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('estimated_first_week_cost', 0))")
            RISK_FLAGS=$(echo "$RESPONSE_BODY" | python3 -c "import sys, json; data=json.load(sys.stdin); print(','.join(data.get('risk_flags', [])))")
            POLICY_STATUS=$(echo "$RESPONSE_BODY" | python3 -c "import sys, json; data=json.load(sys.stdin); policy=data.get('policy_eval', {}); print(policy.get('status', 'unknown'))")
            
            echo "monthly_cost=$MONTHLY_COST" >> $GITHUB_OUTPUT
            echo "weekly_cost=$WEEKLY_COST" >> $GITHUB_OUTPUT
            echo "risk_flags=$RISK_FLAGS" >> $GITHUB_OUTPUT
            echo "policy_status=$POLICY_STATUS" >> $GITHUB_OUTPUT
            
            # Store full response for PR comment
            echo "$RESPONSE_BODY" > finopsguard_response.json
            echo "response_file=finopsguard_response.json" >> $GITHUB_OUTPUT
            
            # Check if policy evaluation failed (blocking)
            if [ "$POLICY_STATUS" = "fail" ]; then
              echo "‚ùå Policy evaluation failed - this may block deployment"
              echo "blocking=true" >> $GITHUB_OUTPUT
            else
              echo "‚úÖ Policy evaluation passed"
              echo "blocking=false" >> $GITHUB_OUTPUT
            fi
            
          else
            echo "‚ùå FinOpsGuard cost check failed with HTTP $HTTP_CODE"
            echo "Error response: $RESPONSE_BODY"
            echo "blocking=false" >> $GITHUB_OUTPUT
            echo "error=true" >> $GITHUB_OUTPUT
          fi

      - name: Comment on Pull Request
        if: github.event_name == 'pull_request' && steps.finopsguard-check.outputs.error != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const responseFile = '${{ steps.finopsguard-check.outputs.response_file }}';
            
            if (fs.existsSync(responseFile)) {
              const response = JSON.parse(fs.readFileSync(responseFile, 'utf8'));
              
              const monthlyCost = response.estimated_monthly_cost || 0;
              const weeklyCost = response.estimated_first_week_cost || 0;
              const riskFlags = response.risk_flags || [];
              const policyEval = response.policy_eval || {};
              const recommendations = response.recommendations || [];
              
              let comment = `## üí∞ FinOpsGuard Cost Analysis\n\n`;
              comment += `### üìä Cost Summary\n`;
              comment += `- **Estimated Monthly Cost**: $${monthlyCost.toFixed(2)}\n`;
              comment += `- **Estimated Weekly Cost**: $${weeklyCost.toFixed(2)}\n`;
              comment += `- **Environment**: ${{ env.ENVIRONMENT }}\n`;
              comment += `- **Monthly Budget**: ${{ env.MONTHLY_BUDGET }}\n\n`;
              
              if (riskFlags.length > 0) {
                comment += `### ‚ö†Ô∏è Risk Flags\n`;
                riskFlags.forEach(flag => {
                  comment += `- \`${flag}\`\n`;
                });
                comment += `\n`;
              }
              
              if (policyEval.status) {
                const statusEmoji = policyEval.status === 'pass' ? '‚úÖ' : '‚ùå';
                comment += `### üõ°Ô∏è Policy Evaluation\n`;
                comment += `${statusEmoji} **Status**: ${policyEval.status.toUpperCase()}\n`;
                if (policyEval.message) {
                  comment += `**Message**: ${policyEval.message}\n`;
                }
                comment += `\n`;
              }
              
              if (recommendations.length > 0) {
                comment += `### üí° Recommendations\n`;
                recommendations.forEach(rec => {
                  comment += `- ${rec}\n`;
                });
                comment += `\n`;
              }
              
              if (response.breakdown_by_resource && response.breakdown_by_resource.length > 0) {
                comment += `### üìã Resource Breakdown\n`;
                response.breakdown_by_resource.forEach(resource => {
                  comment += `- **${resource.type}** (${resource.size || 'N/A'}): $${resource.estimated_monthly_cost?.toFixed(2) || '0.00'}/month\n`;
                });
                comment += `\n`;
              }
              
              comment += `---\n`;
              comment += `*Powered by [FinOpsGuard](https://github.com/your-org/finopsguard)*\n`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

      - name: Fail on Policy Violation
        if: steps.finopsguard-check.outputs.blocking == 'true'
        run: |
          echo "‚ùå Deployment blocked due to policy violation"
          echo "Please review the cost analysis and policy recommendations above"
          exit 1

      - name: Success Summary
        if: steps.finopsguard-check.outputs.error != 'true' && steps.finopsguard-check.outputs.blocking != 'true'
        run: |
          echo "‚úÖ FinOpsGuard cost check completed successfully"
          echo "Monthly cost: ${{ steps.finopsguard-check.outputs.monthly_cost }}"
          echo "Weekly cost: ${{ steps.finopsguard-check.outputs.weekly_cost }}"
          echo "Policy status: ${{ steps.finopsguard-check.outputs.policy_status }}"
          if [ -n "${{ steps.finopsguard-check.outputs.risk_flags }}" ]; then
            echo "Risk flags: ${{ steps.finopsguard-check.outputs.risk_flags }}"
          fi